-- 1. Use the highest privilege role
USE ROLE ACCOUNTADMIN;

-- 2. Create shared sample data database (optional, only if needed)
CREATE OR REPLACE DATABASE SNOWFLAKE_SAMPLE_DATA FROM SHARE SFC_SAMPLES.SAMPLE_DATA;

-- 3. Create custom role and assign it to user
CREATE OR REPLACE ROLE data_engineer;
GRANT ROLE data_engineer TO USER pallavikaran1;

-- 4. Create a database and warehouse
CREATE OR REPLACE DATABASE syndata_db;
CREATE OR REPLACE WAREHOUSE syndata_wh;

-- USE ROLE data_engineer;
USE DATABASE syndata_db;
USE SCHEMA public;

-- Try creating something
CREATE OR REPLACE TABLE test_table (
    id INT,
    name STRING
);

-- 5. Grant warehouse usage
GRANT USAGE ON WAREHOUSE syndata_wh TO ROLE data_engineer;

-- ✅ 6. Transfer ownership of the database using correct syntax
-- GRANT OWNERSHIP ON DATABASE syndata_db TO ROLE data_engineer REVOKE CURRENT GRANTS;

-- 7. Switch to the role to create objects inside it (if desired)
-- USE ROLE data_engineer;

-- 8. Create a schema inside the database (only after switching role or giving permission)
-- If staying as ACCOUNTADMIN, give usage & create privileges on database to role
GRANT USAGE ON DATABASE syndata_db TO ROLE data_engineer;
GRANT CREATE SCHEMA ON DATABASE syndata_db TO ROLE data_engineer;

-- OR, switch role and create schema:
--USE ROLE data_engineer;
CREATE SCHEMA syndata_db.sch;


CREATE OR REPLACE VIEW syndata_db.sch.TPC_ORDERS_5K as (
    SELECT * from SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.ORDERS
    LIMIT 5000
);

CREATE OR REPLACE VIEW syndata_db.sch.TPC_CUSTOMERS_5K as (
    SELECT * from SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.CUSTOMER
    LIMIT 5000
);

-- Query the input tables to view the data and confirm that each table has 5,000 rows
USE WAREHOUSE syndata_wh;
SELECT TOP 20 * FROM syndata_db.sch.TPC_ORDERS_5K;
SELECT COUNT(*) FROM syndata_db.sch.TPC_ORDERS_5K;
select count(distinct o_clerk), count(*) from syndata_db.sch.TPC_ORDERS_5K;

SELECT TOP 20 * FROM syndata_db.sch.TPC_CUSTOMERS_5K;
SELECT COUNT(*) FROM syndata_db.sch.TPC_CUSTOMERS_5K;

--------------------------------------------- GENERATE_SYNTHETIC_DATA FUNCTION -------------------------------------------

-- Call the GENERATE_SYNTHETIC_DATA stored procedure to generate the synthetic data into two output tables.
-- Designate join keys, to join on those keys later.
 CALL SNOWFLAKE.DATA_PRIVACY.GENERATE_SYNTHETIC_DATA({
     'datasets':[
         {
           'input_table': 'syndata_db.sch.TPC_ORDERS_5K',
           'output_table': 'syndata_db.sch.TPC_ORDERS_5K_SYNTHETIC',
           'columns': {'O_CUSTKEY': {'join_key': True}}
         },
         {
           'input_table': 'syndata_db.sch.TPC_CUSTOMERS_5K',
           'output_table': 'syndata_db.sch.TPC_CUSTOMERS_5K_SYNTHETIC',
           'columns' : {'C_CUSTKEY': {'join_key': True}}

         }
       ],
       'replace_output_tables':True
   });
------------------------------------------------------------------------------------------------------------------
-- Query the output table to view the synthetic data
SELECT TOP 20 * FROM syndata_db.sch.TPC_ORDERS_5K_SYNTHETIC;
SELECT COUNT(*) FROM syndata_db.sch.TPC_ORDERS_5K_SYNTHETIC;

SELECT TOP 20 * FROM syndata_db.sch.TPC_CUSTOMERS_5K_SYNTHETIC;
SELECT COUNT(*) FROM syndata_db.sch.TPC_CUSTOMERS_5K_SYNTHETIC;

-- Clean up all the objects
-- USE ROLE ACCOUNTADMIN;
-- DROP DATABASE syndata_db;
-- DROP ROLE data_engineer;
-- DROP WAREHOUSE syndata_wh;

---------------------------------------------------------------------------------------------------------------------------------------
-- Snowflake limits recursion to 100,000 rows by default. You can increase this limit if needed
-- Using SQL functions like SEQUENCE, RANDOM(), and UNIFORM() to generate rows of fake data

WITH RECURSIVE seq AS (
  SELECT 1 AS id
  UNION ALL
  SELECT id + 1 FROM seq WHERE id < 1000
)
SELECT
  id,
  'Customer_' || id AS customer_name,
  UNIFORM(18, 70, RANDOM()) AS age,
  ROUND(UNIFORM(30000, 120000, RANDOM()), 2) AS income,
  CURRENT_DATE - UNIFORM(0, 3650, RANDOM()) AS signup_date
FROM seq;

------------------------------------------------------------------------------------------------------------------
------------------------------------------ TABLE(GENERATOR(...)) for Row Generation ------------------------------
-- Snowflake’s GENERATOR function is optimized for creating large row sets
SELECT
  SEQ4() AS id,
  'User_' || SEQ4() AS username,
  UNIFORM(18, 65, RANDOM()) AS age,
  TO_DATE('2000-01-01') + UNIFORM(0, 8000, RANDOM()) AS signup_date
FROM TABLE(GENERATOR(ROWCOUNT => 100000));
------------------------------------------------------------------------------------------------------------------
